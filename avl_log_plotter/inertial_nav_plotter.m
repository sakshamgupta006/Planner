%==========================================================================
% Autonomous Vehicle Library 
%
% Description: Parses and plots inertial navigation data generated by the
%              inertial nav parser node.
%==========================================================================

close all; clear all; clc;
addpath('functions');
addpath('mex');
disp('Running inertial nav plotter...');

%% Setttings

% Plots the log files in /var/avl_logs/current/log if true, otherwise plots
% the first log file in the base filepath
plot_current = true;

% Folder in which to look for log folders to be parsed and plotted
base_filepath = 'plot_me/';

% Time axis limits. All plot x axes will start and stop at these values. To
% use the full timespan of the log files, use -inf and +inf
t_start = -inf;
t_stop = inf;

% Re-parses log files into .dat files if set to true. Setting to false 
% allows faster plotting if .dat files are already generated
reparse_logs = false;

% List of files to ignore for parsing and plotting. These logs aren't
% really plottable
ignore_files = [
    "command_node.log"
    "tcp_server_node.log"
    "mission_node.log" 
    "safety_node.log" 
    "status_node.log"
    ];
            
%% Parse AVL Log Files

% Get a list of folders in the folder set as the base filepath. Remove the 
% . and .. entries that matlab includes
log_folder_names = dir(base_filepath);
log_folder_names(ismember( {log_folder_names.name}, {'.', '..'})) = [];

% Pick the first of the folders found and assemble a filepath to the log
% folder inside it
if plot_current
    log_filepath = '/var/avl_logs/current/log';
else
    log_filepath = fullfile(log_folder_names(1).folder, log_folder_names(1).name, 'log');
end

% Check for already existing .dat files. If there are some, we don't need
% to re-parse every log file
if isempty(dir(fullfile(log_filepath, '*.dat')))
    
    disp(' ');
    disp('Parsing log files into dat files...');
    
    % Get a list of all log files in the directory and parse them into dat
    % files
    log_filenames = dir(fullfile(log_filepath, '*.log'));
    for i = 1:size(log_filenames,1)

        % Skip the file if it's on the ignore list
        if ismember(log_filenames(i).name, ignore_files)
            disp(['Ignoring file ' log_filenames(i).name]);
            continue; 
        end

        parse_log(fullfile(log_filenames(i).folder, log_filenames(i).name));

    end
    clear mex
    
else
    disp(' ');
    disp('Dat files found, skipping log parsing');
end

% Delete any existing parsed dat files from previous runs if logs should be
% reparsed
if reparse_logs
    delete([log_filepath '*.dat']);
end

%% Determine Start and End Times

disp(' ');
disp('================================================================================');
disp(' ');
disp('Determining log timespan...');
disp(' ');

% We want plots to have an x-axis of seconds since logging started, and not
% epoch time. We also want the x axis to cover the full range of timestamps
% within the log files for every plot. We can find the earliest and latest
% of all timestamps to get the x axis limits, and subtract the start
% timestamp from all timestamps to get time in seconds

% Variable to keep track of the earliest and latest timestamp in the log 
% files
t_earliest = realmax;
t_latest = -1.0;

% Get a list of all dat files in the directory and check the first and last
% timestamp in each one by reading in the data file
dat_filenames = dir(fullfile(log_filepath, '*.dat'));
for i = 1:size(dat_filenames,1)
    
    try
        
        % Read the file contents
        content = read_dat_file(fullfile(dat_filenames(i).folder, dat_filenames(i).name));

        % Get the first and last timestamps
        t_first = content.t(1);
        t_last = content.t(end);

        % If this file's first timestamp is earlier than the current 
        % earliest timestamp, save it
        if t_first < t_earliest
            t_earliest = t_first;
        end

        % If this file's last timestamp is later than the current latest 
        % timestamp, save it
        if t_last > t_latest
            t_latest = t_last;
        end
        
    catch ex
        
        % The read_dat_file function will print an error if it fails, no
        % need to do anything here
        
    end
    
end

disp(' ');
disp(['Earliest timestamp: ' num2str(t_earliest)]);
disp(['Latest timestamp:   ' num2str(t_latest)]);
    
%% Plot Data

disp(' ');
disp('================================================================================');
disp(' ');
disp('Plotting dat files...');
disp(' ');

% Set all plots to docked
set(0,'DefaultFigureWindowStyle','docked');

% Get a list of all dat files in the directory and plot them
dat_filenames = dir(fullfile(log_filepath, '*.dat'));
for i = 1:size(dat_filenames,1)

    try
        
        % Read in the log data from the .dat file
        log_data = read_dat_file(fullfile(dat_filenames(i).folder, dat_filenames(i).name));

        % If the dat file has data to be plotted, plot it
        if ~isempty(log_data)
            plot_log_data(log_data, dat_filenames(i).name(1:end-4), t_earliest, t_latest, t_start, t_stop);
        end

        % Save variables for custom plots
        
        if dat_filenames(i).name == "inertial_nav_parser_node.pos_cov.dat" || ...
           dat_filenames(i).name == "inertial_nav_ekf_node.pos_cov.dat"
            
            for j = 1:size(log_data.data,1)
                C(:,:,j) = [log_data.data(j,4) log_data.data(j,3); log_data.data(j,2) log_data.data(j,1)];
            end
            
            % Convert covariance in m^2 to deg^2
            C = (rad2deg(sqrt(C) ./ 6371000)).^2;
            
        end
        
        if dat_filenames(i).name == "inertial_nav_parser_node.position.dat" || ...
           dat_filenames(i).name == "inertial_nav_ekf_node.position.dat"
            lat_ekf = log_data.data(:,1);
            lon_ekf = log_data.data(:,2);
        end
        
        if dat_filenames(i).name == "inertial_nav_parser_node.velocity.dat" || ...
           dat_filenames(i).name == "inertial_nav_ekf_node.velocity.dat"
            t_ekf = log_data.t;
            v_eb_n_ekf = log_data.data(:,1:3);
        end
        
        if dat_filenames(i).name == "inertial_nav_parser_node.heading.dat"
            t_heading = log_data.t;
            yaw_meas  = wrapTo360(log_data.data(:,1));
            yaw_ekf   = wrapTo360(log_data.data(:,2));
            yaw_ahrs  = wrapTo360(log_data.data(:,3));
            yaw_err   = wrapTo360(log_data.data(:,4));
        end

    catch ex
        
        % The read_dat_file function will print an error if it fails, no
        % need to do anything here
        
    end
    
end

% Close all open files, if there are any
fclose('all');

disp(' ');
disp('================================================================================');
disp(' ');
disp('Log plotter finished');
disp(' ');

%% Custom map plot
figure
set(gcf, 'name', 'Map', 'numbertitle', 'off')
set(gca, 'LooseInset', get(gca,'TightInset'))
hold on

% Plot EKF estimate
plot(lon_ekf, lat_ekf, 'b.');

% Plot GPS data (GPS measurements, start point, end point) for GPS points
% with more than 6 satellites
gps_data = dlmread('/home/eagle/Desktop/nav_parser_test/gps_node.gps.dat', ' ', 2, 0);
gps_good = gps_data(:,6) >= 6;
plot(gps_data(gps_good,3), gps_data(gps_good,2), 'y+');
plot(gps_data(1,3), gps_data(1,2), 'g+');
plot(gps_data(end,3), gps_data(end,2), 'r+');

% Plot error elipses and lines between the ellipse and the beacon
for i = 1:1000:size(lat_ekf,1)
    hold on
    error_ellipse('mu',[lon_ekf(i); lat_ekf(i)], ...
                  'C', C(:,:,i), ...
                  'style', 'r--');
    plot([-80.6146490084955; lon_ekf(i)], [37.0600895932512, lat_ekf(i)], '-', 'Color', [0,1,0,0.02]);
end

% Plot the underlying Google map
plot_google_map('APIKey','AIzaSyDlpY42E7cy7ChKi7RkSc3A2ol0XID5huE', ...
                'MapType', 'satellite', ...
                'MapScale', 1);
            
axis equal
